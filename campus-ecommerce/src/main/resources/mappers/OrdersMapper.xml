<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.seu.dm.mappers.OrderMapper" >
  <resultMap id="BaseResultMap" type="com.seu.dm.entities.Order" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="order_product_id" property="orderProductId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="seller_id" property="sellerId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="total_price" property="totalPrice" jdbcType="DECIMAL" />
    <result column="shop_id" property="shopId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="pay_id" property="payId" jdbcType="INTEGER" />
    <result column="comment_id" property="commentId" jdbcType="INTEGER" />
    <result column="campus_id" property="campusId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, order_product_id, user_id, seller_id, create_time, total_price, shop_id, status, 
    pay_id, comment_id, campus_id
  </sql>
  <select id="selectWeekTransactions" resultMap="BaseResultMap">
    SELECT date(create_time) as create_time,sum(total_price) as total_price FROM ecommerce.orders
    where date_sub(curdate(), INTERVAL 7 DAY) <![CDATA[<=]]> date(`create_time`)
    group by date(create_time) order by create_time
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from orders
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="findOrdersByBuyerId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where user_id = #{buyerId}
  </select>
  <select id="findOrdersByBuyerIdWithStatusWaitDeliver" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where user_id = #{buyerId} and status = 1
  </select>
  <select id="findOrdersByBuyerIdWithStatusAlreadyDeliver" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where user_id = #{buyerId} and status = 2
  </select>
  <select id="findOrdersByBuyerIdWithStatusOnRejection" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where user_id = #{buyerId} and status = 3
  </select>
  <select id="findOrdersByBuyerIdWithStatusAlreadyRejection" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where user_id = #{buyerId} and status = 4
  </select>
  <select id="findOrdersByBuyerIdWithStatusSuccess" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where user_id = #{buyerId} and status = 5
  </select>
  <select id="findOrdersBySellerIdWithStatusWaitDeliver" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where seller_id = #{sellerId} and status = 1
  </select>
  <select id="findOrdersBySellerIdWithStatusAlreadyDeliver" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where seller_id = #{sellerId} and status = 2
  </select>
  <select id="findOrdersBySellerIdWithStatusOnRejection" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where seller_id = #{sellerId} and status = 3
  </select>
  <select id="findOrdersBySellerIdWithStatusAlreadyRejection" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where seller_id = #{sellerId} and status = 4
  </select>
  <select id="findOrdersBySellerIdWithStatusSuccess" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where seller_id = #{sellerId} and status = 5
  </select>
  <select id="findOrdersBySellerId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select * from orders where seller_id = #{sellerId}
  </select>
  <select id="findOrders" parameterType="com.seu.dm.entities.Order" resultMap="BaseResultMap">
    select * from orders where 1=1
    <if test="campusId != null">
      and campus_id = #{campusId,jdbcType=INTEGER}
    </if>
    <if test="id != null">
      and id = #{id,jdbcType=INTEGER}
    </if>
    <if test="status != null">
      and status = #{status,jdbcType=INTEGER}
    </if>
  </select>
  <select id="getCount" parameterType="com.seu.dm.entities.Order" resultType="java.lang.Integer">
    select count(*) from orders where 1=1
    <if test="campusId != null">
      and campus_id = #{campusId,jdbcType=INTEGER}
    </if>
    <if test="status != null">
      and status = #{status,jdbcType=INTEGER}
    </if>
  </select>
  <select id="screenOrders" resultMap="BaseResultMap">
    select * from orders
    where status = #{orderStatus} and campus_id = #{campusId}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from orders
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.seu.dm.entities.Order" >
    insert into orders (id, order_product_id, user_id, 
      seller_id, create_time, total_price, 
      shop_id, status, pay_id, 
      comment_id, campus_id)
    values (#{id,jdbcType=INTEGER}, #{orderProductId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{sellerId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{totalPrice,jdbcType=DECIMAL}, 
      #{shopId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{payId,jdbcType=INTEGER},
      #{commentId,jdbcType=INTEGER}, #{campusId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.seu.dm.entities.Order" >
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="orderProductId != null" >
        order_product_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="sellerId != null" >
        seller_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="totalPrice != null" >
        total_price,
      </if>
      <if test="shopId != null" >
        shop_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="payId != null" >
        pay_id,
      </if>
      <if test="commentId != null" >
        comment_id,
      </if>
      <if test="campusId != null" >
        campus_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderProductId != null" >
        #{orderProductId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="sellerId != null" >
        #{sellerId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=DECIMAL},
      </if>
      <if test="shopId != null" >
        #{shopId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="payId != null" >
        #{payId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null" >
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="campusId != null" >
        #{campusId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.seu.dm.entities.Order" >
    update orders
    <set >
      <if test="orderProductId != null" >
        order_product_id = #{orderProductId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="sellerId != null" >
        seller_id = #{sellerId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalPrice != null" >
        total_price = #{totalPrice,jdbcType=DECIMAL},
      </if>
      <if test="shopId != null" >
        shop_id = #{shopId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="payId != null" >
        pay_id = #{payId,jdbcType=INTEGER},
      </if>
      <if test="commentId != null" >
        comment_id = #{commentId,jdbcType=INTEGER},
      </if>
      <if test="campusId != null" >
        campus_id = #{campusId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.seu.dm.entities.Order" >
    update orders
    set order_product_id = #{orderProductId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      seller_id = #{sellerId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      total_price = #{totalPrice,jdbcType=DECIMAL},
      shop_id = #{shopId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      pay_id = #{payId,jdbcType=INTEGER},
      comment_id = #{commentId,jdbcType=INTEGER},
      campus_id = #{campusId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>